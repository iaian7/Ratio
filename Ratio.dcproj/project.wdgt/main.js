/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
	loadPrefs();
	versionCheck();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	erasePrefs();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
	savePrefs();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
		updatePrefs();
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

// Begin app-specific functions

var wid = widget.identifier;
var prefPreset = loadPref(wid+"preset",1);
var prefLimit = loadPref(wid+"limit",10);
var prefLimitID = loadPref(wid+"limitID",7);
var prefScale = loadPref(wid+"scale",66.67);
var prefRatio = loadPref(wid+"ratio","16x9");
var prefAspect = loadPref(wid+"aspect",1.778);
var prefLock = loadPref(wid+"lock",false);
var prefWidth = loadPref(wid+"width",1920);
var prefHeight = loadPref(wid+"height",1080);

// Preference Saving

function loadPref(key,value) {
	var string = widget.preferenceForKey(key);
	if (string != null) {
		return string;
	} else {
		widget.setPreferenceForKey(value,key);
		return value;
	}
}

function loadPrefs() {
//	alert("ready!");
//	alert("prefPreset = "+prefPreset);
	document.getElementById("presets").object.setSelectedIndex(prefPreset);
	document.getElementById("limits").object.setSelectedIndex(prefLimitID);
	document.getElementById("inputX").value = prefWidth;
	document.getElementById("inputY").value = prefHeight;
	update(true,true,true,true,true);
}

function savePref(key,value) {
	if (window.widget) {
		widget.setPreferenceForKey(value,wid+key);
	}
}

function updatePrefs() {	// SAVING PREFS
	if (window.widget) {
		widget.setPreferenceForKey(prefPreset,wid+"preset");
		widget.setPreferenceForKey(prefLimit,wid+"limit");
		widget.setPreferenceForKey(prefLimitID,wid+"limitID");
		widget.setPreferenceForKey(prefScale,wid+"scale");
		widget.setPreferenceForKey(prefRatio,wid+"ratio");
		widget.setPreferenceForKey(prefAspect,wid+"aspect");
		widget.setPreferenceForKey(prefLock,wid+"lock");
		widget.setPreferenceForKey(prefWidth,wid+"width");
		widget.setPreferenceForKey(prefHeight,wid+"height");
	}
}

function erasePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(null,wid+"preset");
		widget.setPreferenceForKey(null,wid+"limit");
		widget.setPreferenceForKey(null,wid+"limitID");
		widget.setPreferenceForKey(null,wid+"scale");
		widget.setPreferenceForKey(null,wid+"ratio");
		widget.setPreferenceForKey(null,wid+"aspect");
		widget.setPreferenceForKey(null,wid+"lock");
		widget.setPreferenceForKey(null,wid+"width");
		widget.setPreferenceForKey(null,wid+"height");
	}
}

// Basic Functions

function updatePreset(event) {
	var presetValue = document.getElementById("presets").object.getValue();
	prefPreset = document.getElementById("presets").object.getSelectedIndex();
//	alert(presetValue+"\t\t"+prefPreset);

	if (presetValue != "presets") {
		presetValue = presetValue.split("x");
		prefWidth = inputX.value = presetValue[0];
		prefHeight = inputY.value = presetValue[1];
	}

	updatePrefs();
	return update(true,true,false,false,true);
}

function updateLimit(event) {
	prefLimit = document.getElementById("limits").object.getValue();
	prefLimitID = document.getElementById("limits").object.getSelectedIndex();

	updatePrefs();
}

function updateAuto(event) {
	if (isNaN(event)) {
		return showMain();
	} else {
		prefScale = event;
		updatePrefs();
		showMain();
		return update(true,true,true,true,false);
	}
}

function updateSource(event) {
	var inputX = document.getElementById("inputX").value;
	var inputY = document.getElementById("inputY").value;
	var active = "both";

	if (event.target.id == "inputX" && inputX>0) {
		prefWidth = parseFloat(inputX);
		if (prefLock) prefHeight = (parseFloat(inputX))/prefAspect;
		active = "inputX";
	} else if (event.target.id == "inputY" && inputY>0) {
		prefHeight = parseFloat(inputY);
		if (prefLock) prefWidth = (parseFloat(inputY))*prefAspect;
		active = "inputY";
	}

	return update(true,true,false,false,true,active);
}

function updateX(event) {
//	alert("updateX");
	var output = document.getElementById("outputX");
	output = parseFloat(output.value);

	if (output>0) {
		prefScale = (output/prefWidth)*100;
	} else {
		return update(true,true,false,false,true);
	}

	return update(false,true,true,true,false);
}

function updateY(event) {
//	alert("updateY");
	var output = document.getElementById("outputY");
	output = parseFloat(output.value);

	if (output>0) {
		prefScale = (output/prefHeight)*100;
	} else {
		return update(true,true,false,false,true);
	}

	return update(true,false,true,true,false);
}

function updateSlider(event) {
	var slider = document.getElementById("slider");
	prefScale = parseFloat(slider.value);

	return update(true,true,false,true,false);
}

function updateScale(event) {
	var scale = document.getElementById("scale").value;
	var tf = true;

	if (event.type == "keyup") {
		tf = (event.keyCode == "13" || event.keyCode == "38" || event.keyCode == "40") ? true : false;
	}

	if (parseInt(scale)>0) {
		prefScale = parseFloat(scale);
	} else {
		tf = true;
	}

	return update(true,true,true,tf,false);
}

function update(vx, vy, vs, vp, vr, active) {	// vx = width, vy = height, vs = slider, vp = percentage, vr = ratio & aspect, active = currently active area
	if (vx && vy) {
		if (prefLock && active) {
			if (active == "inputX") {
//				alert("X active");
				if ((prefHeight % 1) == 0) {
					inputY.value = prefHeight.toFixed(0);
				} else {
					inputY.value = prefHeight.toFixed(2);
				}
			} else if (active == "inputY") {
//				alert("Y active");
				if ((prefWidth % 1) == 0) {
					inputX.value = prefWidth.toFixed(0);
				} else {
					inputX.value = prefWidth.toFixed(2);
				}
			}
		}

		if (active == "both") {
//			alert("prevent null results");
			inputX.value = prefWidth.toFixed(0);
			inputY.value = prefHeight.toFixed(0);
		}

		vx = prefWidth*(prefScale*.01);
		vy = prefHeight*(prefScale*.01);

		if (prefLimit == "none") {
//			alert("case 1a");
			outputX.value = vx.toFixed(2);
			outputY.value = vy.toFixed(2);
		} else if ((vx % prefLimit) == 0 && (vy % prefLimit) == 0 || vs == vp) {
//			alert("case 1b");
			outputX.value = vx.toFixed(0);
			outputY.value = vy.toFixed(0);
		}
	} else if (vy) {
		vy = prefHeight*(prefScale*.01);
		if ((vy % 1) == 0) {
//			alert("case 2a");
			outputY.value = vy.toFixed(0);
		} else {
//			alert("case 2b");
			outputY.value = vy.toFixed(2);
		}
	} else if (vx) {
		vx = prefWidth*(prefScale*.01);
		if ((vx % 1) == 0) {
//			alert("case 3a");
			outputX.value = vx.toFixed(0);
		} else {
//			alert("case 3b");
			outputX.value = vx.toFixed(2);
		}
	}

	if (vs) {
		slider.value = parseInt(prefScale);
	}

	if (vp) {
		if ((prefScale % 1) == 0) {
			scale.value = prefScale.toFixed(0)+"%";
		} else {
			scale.value = prefScale.toFixed(2)+"%";
		}
	}

	if (vr && prefWidth>0 && prefHeight>0 && !prefLock) {
		var width = 1;
		var height = 1;
		var row = 0;
		while (row == 0 && width <= 100) {
			height = (prefHeight/prefWidth)*width;
			if ((width % 1) == 0 && (height % 1) == 0) {
				prefRatio = width+" x "+height;
				row = 1;
			}
			width = width+1;
		}
		prefAspect = prefWidth/prefHeight;
		ratio.value = prefRatio;
		aspect.value = prefAspect.toFixed(3);
	}
}

// Swap Width and Height

function swap(event) {
	var itemToFadeOut = document.getElementById("swap");
	var fadeHandler = function(a, c, s, f){ itemToFadeOut.style.opacity = c; };
	new AppleAnimator(500, 10, 1.0, 0.5, fadeHandler).start();

	var inputX = document.getElementById("inputX");
	var inputY = document.getElementById("inputY");
	var swapX = inputY.value;
	var swapY = inputX.value;
	prefWidth = inputX.value = parseFloat(swapX);
	prefHeight = inputY.value = parseFloat(swapY);

	return update(true,true,false,false,true);
}

// Aspect Ratio Toggles

function toggleLock(event) {
	prefLock = true;
	showLock();
}

function toggleUnlock(event) {
	prefLock = false;
	showUnlock();
}

function showLock(event) {
	document.getElementById("aspectLock").object.setCurrentView("locked", true, true);
}

function showUnlock(event) {
	document.getElementById("aspectLock").object.setCurrentView("unlocked", true, true);
}

// Key listener

function keyboard(event) {
	var data = parseFloat(event.target.value);
	if (event.keyCode == 38) {
		if (event.shiftKey == true) {
			event.target.value = data+10
		} else {
			event.target.value = data+1
		}
		return true;
	} else if (event.keyCode == 40) {
		if (event.shiftKey == true) {
			event.target.value = data-10
		} else {
			event.target.value = data-1
		}
		return true;
	} else {
		return true;
	}
}

function keyboardDetail(event) {
	var data = parseFloat(event.target.value);
	if (event.keyCode == 38) {
		if (event.shiftKey == true) {
			event.target.value = data+.1
		} else {
			event.target.value = data+.01
		}
		return true;
	} else if (event.keyCode == 40) {
		if (event.shiftKey == true) {
			event.target.value = data-.1
		} else {
			event.target.value = data-.01
		}
		return true;
	} else {
		return true;
	}
}

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}



// Auto Generate

var listData = {
	_rowData: [["","",""]],

	numberOfRows: function() {
		return this._rowData.length;
	},

	prepareRow: function(rowElement, rowIndex, templateElements) {
		if (templateElements.labelScale) {
			var labScale = parseFloat(this._rowData[rowIndex][0]).toFixed(2);
//			labScale = ((labScale % 1) == 0) ? parseInt(labScale) : labScale;
			templateElements.labelScale.innerText = (isNaN(labScale)) ? "" : labScale+"%";
		}

		if (templateElements.label) {
			templateElements.label.innerText = this._rowData[rowIndex][1];
		}

		var _this = this;

		rowElement.onclick = function(event) {
			updateAuto(_this._rowData[rowIndex][0])
		};
	}
};

function auto(event) {
	var width = parseInt(prefWidth);
	var height = parseInt(prefHeight);
	var row = 0;
	listData._rowData = [["","",""]];

	while (width >= (prefLimit*2)) {
		width = width-prefLimit;
		height = (prefHeight/prefWidth)*width;

		if ((width % prefLimit) == 0 && (height % prefLimit) == 0) {
			listData._rowData[row] = [(width/prefWidth)*100, width+" x "+height];
			row = row+1;
		}
	}

	if (listData._rowData[0][0] < 1) listData._rowData[0][1] = listData._rowData[0][0] = "no results found";

	ratioList.object.reloadData();
	showList(event);
	document.getElementById("scrollArea").object.refresh();
}

function showMain(event) {
	document.getElementById("stack").object.setCurrentView("main", false, true);
}

function showList(event) {
	document.getElementById("stack").object.setCurrentView("list", true, true);
}

function showUpdate(event) {
	document.getElementById("stack").object.setCurrentView("update", true, true);
}

// Get Key Value

function getKeyValue(plist, key) {
	var infoPlist = new XMLHttpRequest();
	infoPlist.open("GET", plist, false);
	infoPlist.send(null);
	infoPlist = infoPlist.responseText.replace(/(<([^>]+)>)/ig,"").replace(/\t/ig,"").split("\n");
	for (var i=0; i<infoPlist.length; i++)
		if (infoPlist[i] == key) return infoPlist[i+1];
	return false;
}

// Auto Update

function versionCheck(event) {
	var request = new XMLHttpRequest();
	var address = "http://iaian7.com/files/dashboard/ratio/version.php?RandomKey=" + Date.parse(new Date());
//	alert(address);
	request.open("GET", address,false);
	request.send(null);
	var versions = request.responseText.split("\n");

	var bundleVersion = getKeyValue("Info.plist", "CFBundleVersion"); 
	var websiteVersion = versions[0];
//	alert("bundleVersion: "+bundleVersion);
//	alert("websiteVersion: "+websiteVersion);

	if (websiteVersion != bundleVersion) {
		document.getElementById("newVersion").innerHTML = "version "+versions[0]+"<br/>"+versions[1];
		showUpdate();
	} else {
		alert("you have an up to date version, or there's been an error");
	}
}

// Download File

function versionDownload() {
	widget.openURL("http://iaian7.com/files/dashboard/ratio/Ratio.zip");
	showMain();
}

// Visit the website

function iaian7(event)
{
	widget.openURL("http://iaian7.com/dashboard/ratio");
}